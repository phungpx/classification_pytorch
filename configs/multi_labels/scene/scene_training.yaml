data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.scene_dataset
        class: SceneDataset
        SceneDataset:
          datadir: '''dataset/scenes/train/images'''
          csv_path: '''dataset/scenes/train/train.csv'''
          image_extent: '''.jpg'''
          image_size: (224, 224)
          inner_size: 256
          transforms:
            - iaa.Fliplr(p=0.5)
            - iaa.Flipud(p=0.5)
            - iaa.Rot90(k=[0, 1, 2, 3], keep_size=False)
      batch_size: 64
      shuffle: True
  
  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.scene_dataset
        class: SceneDataset
        SceneDataset:
          datadir: '''dataset/scenes/train/images'''
          csv_path: '''dataset/scenes/train/train.csv'''
          image_extent: '''.jpg'''
          image_size: (224, 224)
          inner_size: 256
      batch_size: 64
      shuffle: False
  
  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.scene_dataset
        class: SceneDataset
        SceneDataset:
          datadir: '''dataset/scenes/valid/images'''
          csv_path: '''dataset/scenes/valid/valid.csv'''
          image_extent: '''.jpg'''
          image_size: (224, 224)
          inner_size: 256
      batch_size: 64
      shuffle: False

# loss:
#   module: flame.core.loss.loss
#   class: Loss
#   Loss:
#     loss_fn: torch.nn.BCELoss()
#     output_transform: 'lambda x: (x[0].sigmoid(), x[1])'

loss:
  module: flame.core.loss.loss
  class: Loss
  Loss:
    loss_fn: torch.nn.BCEWithLogitsLoss()
    output_transform: 'lambda x: (x[0], x[1])'

model:
  module: flame.core.model.mobilenetv2
  class: MobileNetV2
  MobileNetV2:
    num_classes: 5
    pretrained: True
    features_fixed: True

# model:
#   module: flame.core.model.resnet50
#   class: Resnet50
#   Resnet50:
#     num_classes: 5
#     pretrained: True
#     features_fixed: True

optim:
  module: torch.optim
  class: Adam
  Adam:
    params: config['model'].parameters()
    lr: 0.001

# optim:
#   module: torch.optim
#   class: SGD
#   SGD:
#     params: config['model'].parameters()
#     lr: 0.001
#     momentum: 0.9

train_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['train_eval']
    device: '''cuda'''

valid_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['valid']
    device: '''cuda'''

metrics:
  module: flame.handlers.metrics.metrics
  class: Metrics
  Metrics:
    metrics:
      # loss:
      #   module: flame.handlers.metrics.loss
      #   class: Loss
      #   Loss:
      #     loss_fn: torch.nn.BCELoss()
      #     output_transform: 'lambda x: (x[0].sigmoid(), x[1])'
      loss:
        module: flame.handlers.metrics.loss
        class: Loss
        Loss:
          loss_fn: torch.nn.BCEWithLogitsLoss()
          output_transform: 'lambda x: (x[0], x[1])'
      accuracy:
        module: ignite.metrics
        class: Accuracy
        Accuracy:
          output_transform: 'lambda x: ((x[0].sigmoid() > 0.5).to(torch.float), x[1])'
          is_multilabel: True
          device: '''cuda'''
      precision:
        module: ignite.metrics
        class: Precision
        Precision:
          output_transform: 'lambda x: ((x[0].sigmoid() > 0.5).to(torch.float), x[1])'
          is_multilabel: True
          device: '''cuda'''
          average: True
      recall:
        module: ignite.metrics
        class: Recall
        Recall:
          output_transform: 'lambda x: ((x[0].sigmoid() > 0.5).to(torch.float), x[1])'
          is_multilabel: True
          device: '''cuda'''
          average: True
    attach_to:
      train_evaluator: '''train'''
      valid_evaluator: '''valid'''

screenlogger:
  module: flame.handlers.screenlogger
  class: ScreenLogger
  ScreenLogger:
    eval_names:
      - '''train''' 
      - '''valid'''

history:
  module: flame.handlers.checkpoint
  class: History

checkpoint_loader:
  module: flame.handlers.checkpoint
  class: CheckpointLoader
  CheckpointLoader:
    checkpoint_path: ''''''
    mode: '''train'''

terminate_on_nan:
  module: flame.handlers.terminate_on_nan
  class: TerminateOnNan

# lr_scheduler:
#   module: flame.handlers.lr_scheduler
#   class: ReduceLROnPlateau
#   ReduceLROnPlateau:
#     score_name: '''loss'''
#     evaluator_name: '''valid_evaluator'''
#     mode: '''min'''
#     patience: 5
#     verbose: True

lr_scheduler:
  module: flame.handlers.lr_scheduler
  class: CosineAnnealingLR
  CosineAnnealingLR:
    score_name: '''loss'''
    evaluator_name: '''valid_evaluator'''
    T_max: 5
    eta_min: 0.005
    # verbose: True

early_stopping:
  module: flame.handlers.early_stopping
  class: EarlyStopping
  EarlyStopping:
    score_name: '''loss'''
    evaluator_name: '''valid_evaluator'''
    mode: '''min'''
    patience: 5

best_saver:
  module: flame.handlers.checkpoint
  class: BestSaver
  BestSaver:
    dirname: '''checkpoint/SceneDataset'''
    score_name: '''loss'''
    mode: '''min'''
    evaluator_name: '''valid_evaluator'''
    n_saved: 1

backup_saver:
  module: flame.handlers.checkpoint
  class: BackupSaver
  BackupSaver:
    modules:
      - '''model'''
      - '''optim'''
      - '''backup_saver'''
      - '''best_saver'''
      - '''history'''
      - '''lr_scheduler'''
      - '''early_stopping'''
    dirname: '''checkpoint/SceneDataset'''
    save_interval: 1
    n_saved: 1

engine:
  module: flame.core.engine.engine
  class: Trainer
  Trainer:
    dataset: config['data']['train']
    device: '''cuda'''
    max_epochs: 10000

extralibs:
  torch: torch
  iaa: imgaug.augmenters
