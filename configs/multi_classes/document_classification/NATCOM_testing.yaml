data:
  test:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.document_classification
        class: DocumentClassification
        DocumentClassification:
          datadirs:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/semantic_segmentation_pytorch/dataset/NATCOM2/test/'''
            - '''dataset/multi_classes/document_classification/VEHICLE_REGISTRATION/test/'''
          classes:
            CARD_FRONT_TYPE_1: 0
            CARD_BACK_TYPE_1: 1
            OTHERS: 2
          image_patterns: ['''*.*g''', '''*.*G''']
          image_size: (224, 224)
          inner_size: 256
      batch_size: 128
      pin_memory: True
      num_workers: 12
      drop_last: False
      shuffle: False

model:
  module: flame.core.model.mobilenets.mobilenetv3
  class: MobileNetV3Small
  MobileNetV3Small:
    num_classes: 3

metrics:
  module: flame.handlers.metrics.metrics
  class: Metrics
  Metrics:
    metrics:
      loss:
        module: flame.handlers.metrics.loss
        class: Loss
        Loss:
          loss_fn:
            module: torch.nn
            class: CrossEntropyLoss
            CrossEntropyLoss:
              weight: "torch.tensor([0.2673039, 0.4268293, 0.3058668]).to('cuda')"
          output_transform: 'lambda x: (x[0], x[1])'
      accuracy:
        module: ignite.metrics
        class: Accuracy
        Accuracy:
          output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'
      precision:
        module: ignite.metrics
        class: Precision
        Precision:
          average: True
          output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'
      recall:
        module: ignite.metrics
        class: Recall
        Recall:
          average: True
          output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'
    attach_to:
      engine: '''test'''

screenlogger:
  module: flame.handlers.screenlogger
  class: ScreenLogger
  ScreenLogger:
    eval_names:
      - '''test'''

checkpoint_loader:
  module: flame.handlers.checkpoint
  class: CheckpointLoader
  CheckpointLoader:
    checkpoint_path: '''checkpoint/document_classification/NATCOM/mobilenetv3_small/2206061350/best_model_114_loss=-0.0000.pt'''
    mode: '''test'''

comparer:
  module: flame.handlers.pred_comparer
  class: Comparer
  Comparer:
    is_multiclass: True
    output_transform: 'lambda x: (x[0].softmax(dim=1), x[1], x[-1])'

engine:
  module: flame.core.engine.engine
  class: Evaluator
  Evaluator:
    dataset: config['data']['test']
    device: '''cuda'''

extralibs:
  torch: torch
