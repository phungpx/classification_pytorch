data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.spoofing_card_dataset
        class: SpoofingCardDataset
        SpoofingCardDataset:
          dirname: '''dataset/train/'''
          classes:
            real: 0
            fake: 1
          card_types: ['''CMND''', '''CCCD''', '''CMCC''', '''CMND_BACK''', '''CCCD_BACK''']
          crop_ratios: [-0.1, 0., 2.5]
          image_sizes: [112, 224, 448]
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''', '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.xml''']
          transforms:
            - 'iaa.Fliplr(p=0.5)'
            - 'iaa.Flipud(p=0.5)'
            - 'iaa.Rot90(k=[0, 1, 2, 3], keep_size=False)'
      batch_size: 32
      shuffle: True
  
  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.spoofing_card_dataset
        class: SpoofingCardDataset
        SpoofingCardDataset:
          dirname: '''dataset/train/'''
          classes:
            real: 0
            fake: 1
          card_types: ['''CMND''', '''CCCD''', '''CMCC''', '''CMND_BACK''', '''CCCD_BACK''']
          crop_ratios: [-0.1, 0., 2.5]
          image_sizes: [112, 224, 448]
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''',
                           '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.xml''']
      batch_size: 32
      shuffle: False
  
  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: flame.core.data.spoofing_card_dataset
        class: SpoofingCardDataset
        SpoofingCardDataset:
          dirname: '''dataset/valid/'''
          classes:
            real: 0
            fake: 1
          card_types: ['''CMND''', '''CCCD''', '''CMCC''', '''CMND_BACK''', '''CCCD_BACK''']
          crop_ratios: [-0.1, 0., 2.5]
          image_sizes: [112, 224, 448]
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''', '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.xml''']
      batch_size: 32
      shuffle: False

# loss:
#   module: flame.core.loss.loss
#   class: Loss
#   Loss:
#     loss_fn: torch.nn.CrossEntropyLoss()
#     output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'

loss:
  module: flame.core.loss.focal_loss
  class: FocalLoss
  FocalLoss:
    alpha: 0.5
    gamma: 2.0
    reduction: '''mean'''
    output_transform: 'lambda x: (x[0], x[1])'

model:
  module: flame.core.model.spoofingnet
  class: SpoofingNet
  SpoofingNet:
    num_classes: 2
    num_samples: 3
    mb_pretrained: True
    mb_fixed: False
    mb_out_channels: 256
    feat_out_channels: 1280
    pool_out: 4

optim:
  module: torch.optim
  class: SGD
  SGD:
    params: config['model'].parameters()
    lr: 0.001
    momentum: 0.9

train_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['train_eval']
    device: '''cuda'''

valid_evaluator:
  module: flame.handlers.metric_evaluator
  class: MetricEvaluator
  MetricEvaluator:
    dataset: config['data']['valid']
    device: '''cuda'''

metrics:
  module: flame.handlers.metrics.metrics
  class: Metrics
  Metrics:
    metrics:
      loss:
        module: flame.handlers.metrics.loss
        class: Loss
        Loss:
          loss_fn: torch.nn.CrossEntropyLoss()
          output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'
      focal_loss:
        module: flame.handlers.metrics.loss
        class: Loss
        Loss:
          loss_fn:
            module: flame.handlers.metrics.focal_loss
            class: FocalLoss
            FocalLoss:
              alpha: 0.5
              gamma: 2.0
              reduction: '''mean'''
          output_transform: 'lambda x: (x[0], x[1])'
      accuracy:
        module: ignite.metrics
        class: Accuracy
        Accuracy:
          output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'
      precision:
        module: ignite.metrics
        class: Precision
        Precision:
          output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'
          average: True
      recall:
        module: ignite.metrics
        class: Recall
        Recall:
          output_transform: 'lambda x: (x[0].softmax(dim=1), x[1])'
          average: True
    attach_to:
      train_evaluator: '''train'''
      valid_evaluator: '''valid'''

screenlogger:
  module: flame.handlers.screenlogger
  class: ScreenLogger
  ScreenLogger:
    eval_names:
      - '''train''' 
      - '''valid'''

history:
  module: flame.handlers.checkpoint
  class: History

checkpoint_loader:
  module: flame.handlers.checkpoint
  class: CheckpointLoader
  CheckpointLoader:
    checkpoint_path: ''''''
    mode: '''train'''

terminate_on_nan:
  module: flame.handlers.terminate_on_nan
  class: TerminateOnNan

lr_scheduler:
  module: flame.handlers.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    score_name: '''focal_loss'''
    evaluator_name: '''valid_evaluator'''
    mode: '''min'''
    patience: 10
    verbose: True

early_stopping:
  module: flame.handlers.early_stopping
  class: EarlyStopping
  EarlyStopping:
    score_name: '''focal_loss'''
    evaluator_name: '''valid_evaluator'''
    mode: '''min'''
    patience: 10

best_saver:
  module: flame.handlers.checkpoint
  class: BestSaver
  BestSaver:
    dirname: '''checkpoint/SpoofingCardDataset'''
    score_name: '''focal_loss'''
    mode: '''min'''
    evaluator_name: '''valid_evaluator'''
    n_saved: 1

backup_saver:
  module: flame.handlers.checkpoint
  class: BackupSaver
  BackupSaver:
    modules:
      - '''model'''
      - '''optim'''
      - '''backup_saver'''
      - '''best_saver'''
      - '''history'''
      - '''lr_scheduler'''
      - '''early_stopping'''
    dirname: '''checkpoint/SpoofingCardDataset'''
    save_interval: 1
    n_saved: 1

engine:
  module: flame.core.engine.engine
  class: Trainer
  Trainer:
    dataset: config['data']['train']
    device: '''cuda'''
    max_epochs: 10000

extralibs:
  torch: torch
  iaa: imgaug.augmenters